<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="activetech.edpc.dao.mapper.HspCszlInfMapperCustom">
	<select id="countCsPatientList" parameterType="activetech.edpc.pojo.dto.HspCszlInfQueryDto"
				 resultType="java.lang.Integer">
		select count(*)
		  from hsp_dbzl_bas
		 where PAT_TYP = '3'
		 <if test="cstNam !=null and cstNam.length()>0">
		   and cst_nam = #{cstNam, jdbcType = VARCHAR}
		 </if>
		 <if test="vstCad !=null and vstCad.length()>0">
		   and vst_cad = #{vstCad, jdbcType = VARCHAR}
		 </if>
		   and reg_tim <![CDATA[>]]> #{startdate, jdbcType = TIMESTAMP}
	   	   and reg_tim <![CDATA[<]]> #{enddate, jdbcType = TIMESTAMP} +1
	</select>
		
	<select id="getCsPatientList" parameterType="activetech.edpc.pojo.dto.HspCszlInfQueryDto"
		resultType="activetech.edpc.pojo.dto.HspDbzlBasCustom">
		<include refid="activetech.base.CommonSql.page_start" />
		select reg_seq,
               reg_tim,
               emg_seq,
               mpi,
               pat_typ,
               way_typ,
               card_type,
               vst_cad,
               cst_nam,
               cst_sex_cod,
               id_type,
               id_nbr,
               cst_age_cod,
               decode(cst_age_cod, '0', cst_age, '0') cstAge,
               pat_wgt,
               pat_hgt,
               bth_dat,
               phe_nbr,
               cst_adr,
               nation,
               emg_job,
               marital_status,
               cst_edu,
               lnk_man,
               lnk_way,
               grn_chl,
               sw_chl,
               hsp_ara,
               yqxh,
               jzxh,
               zyxh,
               doc_dat,
               jzys,
               ysxm,
               ksdm,
               crt_tim,
               crt_no,
               crt_nam,
               mod_tim,
               mod_no,
               mod_nam,
               nvl(rcd_sta, '1') rcd_sta,
               chk_tim,
               chk_no,
               chk_nam,
               chk_msg,
               stp_flg,
               stp_tim,
               stp_no,
               stp_nam,
               nvl(smt_sta, '1') smt_sta,
               smt_seq,
               smt_msg,
               smt_no,
               smt_nam,
               smt_tim
		  from hsp_dbzl_bas
		 where PAT_TYP = '3'
		 <if test="cstNam !=null and cstNam.length()>0">
		   and cst_nam = #{cstNam, jdbcType = VARCHAR}
		 </if>
		 <if test="vstCad !=null and vstCad.length()>0">
		   and vst_cad = #{vstCad, jdbcType = VARCHAR}
		 </if>
		   and reg_tim <![CDATA[>]]> #{startdate, jdbcType = TIMESTAMP}
	   	   and reg_tim <![CDATA[<]]> #{enddate, jdbcType = TIMESTAMP} +1
		<include refid="activetech.base.CommonSql.page_end" />
	</select>
	
	<!-- 创伤急救时间轴 -->
	<select id="getCzTimeline" parameterType="java.lang.String"
		resultType="activetech.edpc.pojo.dto.HspCszlInfCustom">
		select seq_no,
			   emg_no,
			   pro_code,
			   pro_type,
			   pro_name,
			   pro_val,
			   key_time
		  from (select inf.seq_no,
		               inf.emg_no,
		               inf.pro_code,
		               inf.pro_val,
		               substr(inf.pro_val, 0, 16) valsort,
		               def.pro_type,
		               def.pro_name,
		               def.key_time
		          from hsp_cszl_inf inf, hsp_cszl_def def
		         where inf.pro_code = def.pro_code
		           and inf.emg_no = #{emgSeq, jdbcType = VARCHAR}
		           and def.pro_type = 'datetime'
		           and def.key_time in ('1', '2')
		           and inf.pro_val is not null) temp
		 order by temp.valsort asc
    </select>
	
	<select id="mergeHspCszlInf" parameterType="activetech.edpc.pojo.domain.HspCszlInf">
        merge into hsp_cszl_inf a
				using (select #{emgNo, jdbcType = VARCHAR} emg_no,
				              #{proCode, jdbcType = VARCHAR} pro_code,
				              #{proVal, jdbcType = VARCHAR} pro_val
				         from dual) b
				on (a.emg_no = b.emg_no and a.pro_code = b.pro_code)
				when matched then
				  update
				     set a.pro_val   = b.pro_val,
				         a.mod_user  = #{modUser, jdbcType = VARCHAR},
				         a.mod_time  = sysdate
				when not matched then
				  insert
				    (SEQ_NO,
				     EMG_NO,
				     PRO_CODE,
				     PRO_VAL,
				     CRT_TIME,
				     CRT_USER,
				     MOD_TIME,
				     MOD_USER)
				  values
				     (#{seqNo, jdbcType = VARCHAR},
				     b.emg_no,
				     b.pro_code,
				     b.pro_val,
				     sysdate,
				     #{crtUser, jdbcType = VARCHAR},
				     sysdate,
				     #{crtUser, jdbcType = VARCHAR})
    </select>
</mapper>